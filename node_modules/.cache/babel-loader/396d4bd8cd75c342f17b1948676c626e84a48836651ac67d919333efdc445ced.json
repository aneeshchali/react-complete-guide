{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: JSON.stringify(requestConfig.body) ? JSON.stringify(requestConfig.body) : null\n      });\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      applyData(data);\n      //   const loadedTasks = [];\n\n      //   for (const taskKey in data) {\n      //     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n      //   }\n\n      //   setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["C:/Users/lcom/Desktop/react/react-complete-guide/src/hooks/use-http.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method: 'GET',\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: JSON.stringify(requestConfig.body) ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      applyData(data);\r\n      //   const loadedTasks = [];\r\n\r\n      //   for (const taskKey in data) {\r\n      //     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n      //   }\r\n\r\n      //   setTasks(loadedTasks);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  },[]);\r\n\r\n  return {\r\n    isLoading: isLoading,\r\n    error: error,\r\n    sendRequest: sendRequest,\r\n  };\r\n};\r\nexport default useHttp;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,OAAO,GAAG,CAACC,aAAa,EAAEC,SAAS,KAAK;EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,WAAW,GAAGR,WAAW,CAAC,MAAOS,QAAQ,IAAK;IAClDJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACT,aAAa,CAACU,GAAG,EAAE;QAC9CC,MAAM,EAAEX,aAAa,CAACW,MAAM,GAAGX,aAAa,CAACW,MAAM,GAAE,KAAK;QAC1DC,OAAO,EAAEZ,aAAa,CAACY,OAAO,GAAGZ,aAAa,CAACY,OAAO,GAAG,CAAC,CAAC;QAC3DC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,aAAa,CAACa,IAAI,CAAC,GAAGC,IAAI,CAACC,SAAS,CAACf,aAAa,CAACa,IAAI,CAAC,GAAG;MAClF,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAElClB,SAAS,CAACiB,IAAI,CAAC;MACf;;MAEA;MACA;MACA;;MAEA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAlB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAC,EAAE,CAAC;EAEL,OAAO;IACLD,SAAS,EAAEA,SAAS;IACpBE,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC;AACH,CAAC;AAAC,GAvCIP,OAAO;AAwCb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}